{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Technical Guide for GREENGAGE Project Integration Project The GREENGAGE project is a three-year-long pan-European initiative aimed at strengthening urban governance through citizen-based co-creation and crowd-sourcing. Funded under the Horizon Europe Framework Programme and co-funded by the UK government and Switzerland's State Secretariat for Education, Research and Innovation, this project is led by the Austrian Institute of Technology and comprises 17 research and industry partners from the EU and the UK. The project seeks to encourage innovative governance processes and assist public authorities in formulating climate mitigation and adaptation policies. By leveraging citizen participation and providing innovative digital solutions, GREENGAGE lays the groundwork for co-creating and co-designing innovative solutions to monitor environmental issues at the grassroots level. The developed Citizen Observatories (CO) are intended to be further integrated into urban planning decision-making processes. The project encompasses campaigns in four pilot cities across Europe, focusing on mobility, air quality, and healthy living, with citizens encouraged to observe and co-create data solutions for urban environments through Citizen Observatories. Tools The tools directory contains subdirectories for each tool utilized in the project. Each subdirectory includes a detailed description of the tool, its functionality, and its role within the project. Keycloak Directory : /tools Link : tools/keycloak Description : Keycloak is an open-source Identity and Access Management solution aimed at modern applications and services. It facilitates the secure transmission of identity information between applications and services, even across different domains. Examples of integration : Node Python The above README provides a structured outline to document the technical aspects of the GREENGAGE project, offering a solid starting point to further elaborate on the tools and processes involved in the project.","title":"Home"},{"location":"#technical-guide-for-greengage-project-integration","text":"","title":"Technical Guide for GREENGAGE Project Integration"},{"location":"#project","text":"The GREENGAGE project is a three-year-long pan-European initiative aimed at strengthening urban governance through citizen-based co-creation and crowd-sourcing. Funded under the Horizon Europe Framework Programme and co-funded by the UK government and Switzerland's State Secretariat for Education, Research and Innovation, this project is led by the Austrian Institute of Technology and comprises 17 research and industry partners from the EU and the UK. The project seeks to encourage innovative governance processes and assist public authorities in formulating climate mitigation and adaptation policies. By leveraging citizen participation and providing innovative digital solutions, GREENGAGE lays the groundwork for co-creating and co-designing innovative solutions to monitor environmental issues at the grassroots level. The developed Citizen Observatories (CO) are intended to be further integrated into urban planning decision-making processes. The project encompasses campaigns in four pilot cities across Europe, focusing on mobility, air quality, and healthy living, with citizens encouraged to observe and co-create data solutions for urban environments through Citizen Observatories.","title":"Project"},{"location":"#tools","text":"The tools directory contains subdirectories for each tool utilized in the project. Each subdirectory includes a detailed description of the tool, its functionality, and its role within the project.","title":"Tools"},{"location":"#keycloak","text":"Directory : /tools Link : tools/keycloak Description : Keycloak is an open-source Identity and Access Management solution aimed at modern applications and services. It facilitates the secure transmission of identity information between applications and services, even across different domains. Examples of integration : Node Python The above README provides a structured outline to document the technical aspects of the GREENGAGE project, offering a solid starting point to further elaborate on the tools and processes involved in the project.","title":"Keycloak"},{"location":"guidelines/","text":"Comprehensive Guidelines for Documenting and Integrating Tools 1. Duplicating the Documentation Template Action : Begin by duplicating the folder docs/tools/TOOLNAME_template . Purpose : This template serves as a foundational structure for documenting new tools, ensuring consistency across your documentation. 2. Describing the Tool in index.md Content Requirements : In index.md , offer a comprehensive overview of the tool. This should include its purpose, key features, and any unique aspects that make it beneficial for your project. Incorporating External Documentation : If there are external resources or official documentation for the tool, link them. This helps users understand the broader context and capabilities of the tool. Example Structure : ```markdown # Tool Name ## Introduction to Tool Name [Detailed introduction, including the tool's purpose and general functionality.] ## Features [Detailed list of features, explaining how each aspect adds value to the project.] ## Use Case Illustration [Detailed description of a use case, demonstrating how the tool integrates into workflows or solves specific problems.] ``` 3. Integration Guide in integration.md Content : Provide a clear, step-by-step guide for integrating the tool with third-party services. Remember provide a channel to ask for support about the tool. Structure : Requesting Credentials : Outline the process for obtaining necessary access credentials. Configuration Steps : Detail the steps for integrating the tool within their systems, including any specific settings or parameters. Testing and Validation : Emphasize the importance of testing the integration and provide guidance on troubleshooting common issues. 4. Proof of Concept Code in examples Purpose : Supply ready-to-use code examples in various programming languages to demonstrate practical integration. Details : Each example should include comprehensive comments explaining each step and its relevance to the integration process. 5. Documenting Examples in examples/index.md Structure : For each example, include prerequisites, a detailed walkthrough of the project structure, and step-by-step instructions for setup and execution. Clarity : Ensure that the instructions are clear, concise, and suitable for users with varying levels of expertise. 6. Summarizing Tool in docs/index.md Overview : Provide a brief yet informative summary of the tool, highlighting its significance and utility within the project. Example Entry : ```markdown ### Tool Name Directory : /tools/toolname Documentation Link : Tool Documentation Description : A concise summary highlighting the key features and benefits of the tool. Insight into how it integrates with and enhances the project. Integration Example: Node.js Integration Example: Python ``` These guidelines aim to provide a thorough and user-friendly approach to documenting and integrating tools, thereby enhancing the accessibility and usability of your project's documentation.","title":"Guidelines"},{"location":"guidelines/#comprehensive-guidelines-for-documenting-and-integrating-tools","text":"","title":"Comprehensive Guidelines for Documenting and Integrating Tools"},{"location":"guidelines/#1-duplicating-the-documentation-template","text":"Action : Begin by duplicating the folder docs/tools/TOOLNAME_template . Purpose : This template serves as a foundational structure for documenting new tools, ensuring consistency across your documentation.","title":"1. Duplicating the Documentation Template"},{"location":"guidelines/#2-describing-the-tool-in-indexmd","text":"Content Requirements : In index.md , offer a comprehensive overview of the tool. This should include its purpose, key features, and any unique aspects that make it beneficial for your project. Incorporating External Documentation : If there are external resources or official documentation for the tool, link them. This helps users understand the broader context and capabilities of the tool. Example Structure : ```markdown # Tool Name ## Introduction to Tool Name [Detailed introduction, including the tool's purpose and general functionality.] ## Features [Detailed list of features, explaining how each aspect adds value to the project.] ## Use Case Illustration [Detailed description of a use case, demonstrating how the tool integrates into workflows or solves specific problems.] ```","title":"2. Describing the Tool in index.md"},{"location":"guidelines/#3-integration-guide-in-integrationmd","text":"Content : Provide a clear, step-by-step guide for integrating the tool with third-party services. Remember provide a channel to ask for support about the tool. Structure : Requesting Credentials : Outline the process for obtaining necessary access credentials. Configuration Steps : Detail the steps for integrating the tool within their systems, including any specific settings or parameters. Testing and Validation : Emphasize the importance of testing the integration and provide guidance on troubleshooting common issues.","title":"3. Integration Guide in integration.md"},{"location":"guidelines/#4-proof-of-concept-code-in-examples","text":"Purpose : Supply ready-to-use code examples in various programming languages to demonstrate practical integration. Details : Each example should include comprehensive comments explaining each step and its relevance to the integration process.","title":"4. Proof of Concept Code in examples"},{"location":"guidelines/#5-documenting-examples-in-examplesindexmd","text":"Structure : For each example, include prerequisites, a detailed walkthrough of the project structure, and step-by-step instructions for setup and execution. Clarity : Ensure that the instructions are clear, concise, and suitable for users with varying levels of expertise.","title":"5. Documenting Examples in examples/index.md"},{"location":"guidelines/#6-summarizing-tool-in-docsindexmd","text":"Overview : Provide a brief yet informative summary of the tool, highlighting its significance and utility within the project. Example Entry : ```markdown ### Tool Name Directory : /tools/toolname Documentation Link : Tool Documentation Description : A concise summary highlighting the key features and benefits of the tool. Insight into how it integrates with and enhances the project. Integration Example: Node.js Integration Example: Python ``` These guidelines aim to provide a thorough and user-friendly approach to documenting and integrating tools, thereby enhancing the accessibility and usability of your project's documentation.","title":"6. Summarizing Tool in docs/index.md"},{"location":"tools/TOOLNAME_template/","text":"Tool Name Setting Up a Development Environment: Guide to Integrating [Tool Name] Introduction Description: Provide an overview of the tool's purpose and its importance in modern tech environments. Objective: Explain how integrating this tool can benefit development and enhance application security or functionality. Features of [Tool Name] List of Features: Outline key features and capabilities of the tool, emphasizing how each contributes to its effectiveness and utility in development projects. Use Case Scenario Description: Detail a typical use case scenario, demonstrating how the tool operates within a workflow or system. (if possible) Visual Aid: Include a diagram or flowchart to illustrate the use case, making it easier to understand the tool's application in a real-world scenario.","title":"Tool Name"},{"location":"tools/TOOLNAME_template/#tool-name","text":"","title":"Tool Name"},{"location":"tools/TOOLNAME_template/#setting-up-a-development-environment-guide-to-integrating-tool-name","text":"","title":"Setting Up a Development Environment: Guide to Integrating [Tool Name]"},{"location":"tools/TOOLNAME_template/#introduction","text":"Description: Provide an overview of the tool's purpose and its importance in modern tech environments. Objective: Explain how integrating this tool can benefit development and enhance application security or functionality.","title":"Introduction"},{"location":"tools/TOOLNAME_template/#features-of-tool-name","text":"List of Features: Outline key features and capabilities of the tool, emphasizing how each contributes to its effectiveness and utility in development projects.","title":"Features of [Tool Name]"},{"location":"tools/TOOLNAME_template/#use-case-scenario","text":"Description: Detail a typical use case scenario, demonstrating how the tool operates within a workflow or system. (if possible) Visual Aid: Include a diagram or flowchart to illustrate the use case, making it easier to understand the tool's application in a real-world scenario.","title":"Use Case Scenario"},{"location":"tools/TOOLNAME_template/integration/","text":"[Tool Name] Integration Guide for Third-Party Services Introduction explaining the importance of integrating [Tool Name] for centralized management in your system. Step 1: Requesting Access Credentials Instructions on how to request access credentials. Contact details (e.g., email address) for credential requests. Information to be provided in the request (e.g., tool name, description, contact details). Step 2: Receiving Credentials Process description after the request is made. Information on how credentials will be received. Step 3: Configuring Your Service Steps to incorporate the received credentials into the service. Guidelines on setting up the service for proper communication with the [Tool Name]. Step 4: Testing the Integration Instructions for testing the integration to ensure everything is set up correctly. Contact information for support in case of issues during testing. Support and Contact Additional support contact details. Encouragement to reach out with questions or for further assistance. Important Notes: Security reminders and best practices (e.g., keeping credentials confidential). Instructions on what to do if credentials are compromised.","title":"[Tool Name] Integration Guide for Third-Party Services"},{"location":"tools/TOOLNAME_template/integration/#tool-name-integration-guide-for-third-party-services","text":"Introduction explaining the importance of integrating [Tool Name] for centralized management in your system. Step 1: Requesting Access Credentials Instructions on how to request access credentials. Contact details (e.g., email address) for credential requests. Information to be provided in the request (e.g., tool name, description, contact details). Step 2: Receiving Credentials Process description after the request is made. Information on how credentials will be received. Step 3: Configuring Your Service Steps to incorporate the received credentials into the service. Guidelines on setting up the service for proper communication with the [Tool Name]. Step 4: Testing the Integration Instructions for testing the integration to ensure everything is set up correctly. Contact information for support in case of issues during testing. Support and Contact Additional support contact details. Encouragement to reach out with questions or for further assistance. Important Notes: Security reminders and best practices (e.g., keeping credentials confidential). Instructions on what to do if credentials are compromised.","title":"[Tool Name] Integration Guide for Third-Party Services"},{"location":"tools/TOOLNAME_template/examples/","text":"[Tool Name] Integrating [Tool Name] in [Environment] Introduction Description: Provide an overview of the tool's purpose and significance in development. Objective: Explain how this tool enhances the application's functionality or security. Prerequisites List the prerequisites needed to use the tool effectively. Project Structure Source: Link to the example project. Directory Layout: Describe the structure of the example project. Step-by-Step Setup and Configuration Outline the steps to set up the tool in the chosen environment. Detailed Configuration Steps Provide detailed instructions for each configuration file and setting. Running the Services Instructions for starting the services on different operating systems. Accessing the Application Guide on how to access the application once it is running. Additional Configuration (Optional) Discuss any optional configuration steps for advanced users. Troubleshooting Provide common troubleshooting steps or issues and their solutions. Support and Additional Resources Support Channels: List available support channels. External Documentation: Link to the official documentation or other helpful resources. [Language/Framework Integration] (e.g., Python, Node.js) Introduction Brief introduction to integrating the tool with the specific language or framework. Prerequisites List any prerequisites specific to this language/framework. Project Structure Describe the structure of the example integration project. Steps for Integration Step-by-step guide for integrating the tool into projects using this language/framework. Running the Example Instructions on how to run the example project. Accessing the Application How to access and test the application once it's running. Replace sections marked with [brackets] with the relevant information for your specific tool and environment.","title":"[Tool Name]"},{"location":"tools/TOOLNAME_template/examples/#tool-name","text":"","title":"[Tool Name]"},{"location":"tools/TOOLNAME_template/examples/#integrating-tool-name-in-environment","text":"","title":"Integrating [Tool Name] in [Environment]"},{"location":"tools/TOOLNAME_template/examples/#introduction","text":"Description: Provide an overview of the tool's purpose and significance in development. Objective: Explain how this tool enhances the application's functionality or security.","title":"Introduction"},{"location":"tools/TOOLNAME_template/examples/#prerequisites","text":"List the prerequisites needed to use the tool effectively.","title":"Prerequisites"},{"location":"tools/TOOLNAME_template/examples/#project-structure","text":"Source: Link to the example project. Directory Layout: Describe the structure of the example project.","title":"Project Structure"},{"location":"tools/TOOLNAME_template/examples/#step-by-step-setup-and-configuration","text":"Outline the steps to set up the tool in the chosen environment.","title":"Step-by-Step Setup and Configuration"},{"location":"tools/TOOLNAME_template/examples/#detailed-configuration-steps","text":"Provide detailed instructions for each configuration file and setting.","title":"Detailed Configuration Steps"},{"location":"tools/TOOLNAME_template/examples/#running-the-services","text":"Instructions for starting the services on different operating systems.","title":"Running the Services"},{"location":"tools/TOOLNAME_template/examples/#accessing-the-application","text":"Guide on how to access the application once it is running.","title":"Accessing the Application"},{"location":"tools/TOOLNAME_template/examples/#additional-configuration-optional","text":"Discuss any optional configuration steps for advanced users.","title":"Additional Configuration (Optional)"},{"location":"tools/TOOLNAME_template/examples/#troubleshooting","text":"Provide common troubleshooting steps or issues and their solutions.","title":"Troubleshooting"},{"location":"tools/TOOLNAME_template/examples/#support-and-additional-resources","text":"Support Channels: List available support channels. External Documentation: Link to the official documentation or other helpful resources.","title":"Support and Additional Resources"},{"location":"tools/TOOLNAME_template/examples/#languageframework-integration-eg-python-nodejs","text":"","title":"[Language/Framework Integration] (e.g., Python, Node.js)"},{"location":"tools/TOOLNAME_template/examples/#introduction_1","text":"Brief introduction to integrating the tool with the specific language or framework.","title":"Introduction"},{"location":"tools/TOOLNAME_template/examples/#prerequisites_1","text":"List any prerequisites specific to this language/framework.","title":"Prerequisites"},{"location":"tools/TOOLNAME_template/examples/#project-structure_1","text":"Describe the structure of the example integration project.","title":"Project Structure"},{"location":"tools/TOOLNAME_template/examples/#steps-for-integration","text":"Step-by-step guide for integrating the tool into projects using this language/framework.","title":"Steps for Integration"},{"location":"tools/TOOLNAME_template/examples/#running-the-example","text":"Instructions on how to run the example project.","title":"Running the Example"},{"location":"tools/TOOLNAME_template/examples/#accessing-the-application_1","text":"How to access and test the application once it's running. Replace sections marked with [brackets] with the relevant information for your specific tool and environment.","title":"Accessing the Application"},{"location":"tools/keycloak/","text":"Keycloak Setting Up a Development Environment: Guide to Integrating Keycloak Introduction: In today's rapidly evolving tech landscape, ensuring the security of your applications is paramount. As you venture into developing or enhancing your application, integrating a robust authentication and authorization mechanism is crucial. This tutorial aims to guide you through setting up a development environment by integrating Keycloak, an open-source Identity and Access Management solution. Whether you're working on a brand new project or improving an existing one, following this guide will provide a solid foundation for securing your application using Keycloak. Features Keycloak: Single Sign-On (SSO) & Sign-Out: Keycloak facilitates SSO and Single Sign-Out, allowing users to log in once and access various applications without needing to log in again. Standards-Based: Keycloak supports standard protocols for authentication and authorization such as OpenID Connect, OAuth 2.0, and SAML 2.0, ensuring compatibility with various systems. User Federation: It allows user federation with a variety of sources including LDAP and Active Directory, enabling you to manage users and their roles centrally. Customizable: Keycloak is highly customizable, offering a broad range of options to tailor authentication and authorization flows to meet your specific requirements. Scalable: It is designed to be scalable, catering to both small applications and large enterprise solutions with millions of users. Role-Based Access Control (RBAC): Keycloak provides fine-grained authorization and role management, enabling you to control who has access to what in your applications. Multi-factor Authentication (MFA): It supports multi-factor authentication, enhancing security by requiring users to provide multiple forms of identification before gaining access. Social Login: Keycloak supports social logins, allowing users to log in using their social media accounts which can enhance user experience and increase adoption rates. Easy to Integrate: With a variety of client adapters and libraries, integrating Keycloak with your application is straightforward regardless of the technology stack you're using. Support and Community: Being an open-source project, Keycloak has a vibrant community and a wealth of resources available to help you throughout your integration journey. Use case The following diagram show the sequences for an user auythentication procress using Keycloak as an OpenID Connect (OIDC) provider The User initiates the process by requesting a page from the Application. The Application then redirects the User to a browser for authentication. The browser initiates an Authentication Request to Keycloak. Keycloak presents a Login Page to the User. The User enters their credentials into the login page. The credentials are submitted back to Keycloak for validation. Upon successful validation, Keycloak redirects the User back to the Application. The Application makes a Token Request to Keycloak. Keycloak validates the request and, if valid, returns a Token to the Application. With the Token, the User is granted access to the requested page within the Application.","title":"Keycloak"},{"location":"tools/keycloak/#keycloak","text":"","title":"Keycloak"},{"location":"tools/keycloak/#setting-up-a-development-environment-guide-to-integrating-keycloak","text":"","title":"Setting Up a Development Environment: Guide to Integrating Keycloak"},{"location":"tools/keycloak/#introduction","text":"In today's rapidly evolving tech landscape, ensuring the security of your applications is paramount. As you venture into developing or enhancing your application, integrating a robust authentication and authorization mechanism is crucial. This tutorial aims to guide you through setting up a development environment by integrating Keycloak, an open-source Identity and Access Management solution. Whether you're working on a brand new project or improving an existing one, following this guide will provide a solid foundation for securing your application using Keycloak.","title":"Introduction:"},{"location":"tools/keycloak/#features-keycloak","text":"Single Sign-On (SSO) & Sign-Out: Keycloak facilitates SSO and Single Sign-Out, allowing users to log in once and access various applications without needing to log in again. Standards-Based: Keycloak supports standard protocols for authentication and authorization such as OpenID Connect, OAuth 2.0, and SAML 2.0, ensuring compatibility with various systems. User Federation: It allows user federation with a variety of sources including LDAP and Active Directory, enabling you to manage users and their roles centrally. Customizable: Keycloak is highly customizable, offering a broad range of options to tailor authentication and authorization flows to meet your specific requirements. Scalable: It is designed to be scalable, catering to both small applications and large enterprise solutions with millions of users. Role-Based Access Control (RBAC): Keycloak provides fine-grained authorization and role management, enabling you to control who has access to what in your applications. Multi-factor Authentication (MFA): It supports multi-factor authentication, enhancing security by requiring users to provide multiple forms of identification before gaining access. Social Login: Keycloak supports social logins, allowing users to log in using their social media accounts which can enhance user experience and increase adoption rates. Easy to Integrate: With a variety of client adapters and libraries, integrating Keycloak with your application is straightforward regardless of the technology stack you're using. Support and Community: Being an open-source project, Keycloak has a vibrant community and a wealth of resources available to help you throughout your integration journey.","title":"Features Keycloak:"},{"location":"tools/keycloak/#use-case","text":"The following diagram show the sequences for an user auythentication procress using Keycloak as an OpenID Connect (OIDC) provider The User initiates the process by requesting a page from the Application. The Application then redirects the User to a browser for authentication. The browser initiates an Authentication Request to Keycloak. Keycloak presents a Login Page to the User. The User enters their credentials into the login page. The credentials are submitted back to Keycloak for validation. Upon successful validation, Keycloak redirects the User back to the Application. The Application makes a Token Request to Keycloak. Keycloak validates the request and, if valid, returns a Token to the Application. With the Token, the User is granted access to the requested page within the Application.","title":"Use case"},{"location":"tools/keycloak/integration/","text":"Keycloak Integration Guide for Third-Party Services To facilitate a centralized user management system, we are utilizing Keycloak as our identity and access management solution. To integrate your service with our Keycloak system, please follow the instructions below to request the necessary credentials. Step 1: Requesting Client Credentials Send an email to greengage.admin@deusto.es with the subject line: \"[GREENGAGE] Request for Keycloak Client Credentials\". In the body of the email, please provide the following information: Tool name: Description: (no more than 200 characters): Contact name:(for technical propose) Contact email:(for technical propose) Step 2: Receiving Your Credentials Upon receipt of your request, we will review the information and create a unique Client ID and Secret for your service. We will then send you an email with your Client ID and Secret, which you will use to configure the integration on your side. Step 3: Configuring Your Service Once you have received your Client ID and Secret, incorporate these credentials into your service\u2019s authentication module. Ensure that your service is set to communicate with our Keycloak server using the OpenID Connect protocol. Step 4: Testing the Integration After configuring your service, conduct thorough testing to ensure that the authentication process works correctly. If you encounter any issues during testing, please reach out to us via email for support. If you have any questions about Keycloak integration, please contact us at greengage.admin@deusto.es with the subject \"[Greengage] Keycloak support request\" Important Notes: Keep your Client Secret confidential. Do not share it with unauthorized personnel or services. If you believe your Client Secret has been compromised, contact us immediately to issue a new one. Adhere to all security best practices when implementing the integration to safeguard user data.","title":"Keycloak Integration Guide for Third-Party Services"},{"location":"tools/keycloak/integration/#keycloak-integration-guide-for-third-party-services","text":"To facilitate a centralized user management system, we are utilizing Keycloak as our identity and access management solution. To integrate your service with our Keycloak system, please follow the instructions below to request the necessary credentials. Step 1: Requesting Client Credentials Send an email to greengage.admin@deusto.es with the subject line: \"[GREENGAGE] Request for Keycloak Client Credentials\". In the body of the email, please provide the following information: Tool name: Description: (no more than 200 characters): Contact name:(for technical propose) Contact email:(for technical propose) Step 2: Receiving Your Credentials Upon receipt of your request, we will review the information and create a unique Client ID and Secret for your service. We will then send you an email with your Client ID and Secret, which you will use to configure the integration on your side. Step 3: Configuring Your Service Once you have received your Client ID and Secret, incorporate these credentials into your service\u2019s authentication module. Ensure that your service is set to communicate with our Keycloak server using the OpenID Connect protocol. Step 4: Testing the Integration After configuring your service, conduct thorough testing to ensure that the authentication process works correctly. If you encounter any issues during testing, please reach out to us via email for support. If you have any questions about Keycloak integration, please contact us at greengage.admin@deusto.es with the subject \"[Greengage] Keycloak support request\" Important Notes: Keep your Client Secret confidential. Do not share it with unauthorized personnel or services. If you believe your Client Secret has been compromised, contact us immediately to issue a new one. Adhere to all security best practices when implementing the integration to safeguard user data.","title":"Keycloak Integration Guide for Third-Party Services"},{"location":"tools/keycloak/examples/","text":"Examples Nodejs Prerequisites Docker and Docker Compose installed. Node.js and npm installed. Basic understanding of Keycloak, Docker, and Node.js. Project Structure Source: example example/ |-- docker-compose.yml |-- realm-export.json |-- keycloak.json |-- package.json |-- index.js |-- run.sh (for Linux/macOS) |-- run.bat (for Windows) Step 1: Setting Up Keycloak docker-compose.yml : This file contains the configuration to run a Keycloak container. Make sure the docker-compose.yml file is set up as provided in your project. realm-export.json : This file should be configured according to your Keycloak realm requirements. It contains realm, client, user, and role configurations. Step 2: Setting Up Node.js Application package.json : This file contains your project metadata and dependencies. Ensure express , express-session , and keycloak-connect dependencies are listed. index.js : This file contains your Express application setup. It sets up routes for login, logout, and the home page which displays the JWT. keycloak.json : This file contains the Keycloak client configuration. Update the realm , resource , and credentials fields with your Keycloak configuration. Installing Dependencies : Run the following command to install the necessary packages as listed in your package.json : npm i Step 3: Running the Services Linux/macOS : Ensure run.sh is executable: chmod +x run.sh . Execute run.sh to start the services: ./run.sh . Windows : Double-click run.bat or run it in the command prompt to start the services. Accessing the Application Navigate to localhost:3000/auth to log in using Keycloak. Once logged in, navigate to localhost:3000 to view the JWT and its decoded payload. To logout, navigate to localhost:3000/logout . Step 1: Install and Setup Keycloak Download and install Keycloak from the official website . Start Keycloak by navigating to the bin directory of your Keycloak installation and executing the standalone.sh (for Linux/macOS) or standalone.bat (for Windows) script. Access the Keycloak Admin Console at http://localhost:8080/auth and complete the initial setup. Create an admin user for managing Keycloak. Step 2: Create a Realm and a Client (OpenID Connect) Create a New Realm: Navigate to the Keycloak Admin Console. Click on \"Add realm\" to create a new realm. Enter the required details for your realm and save. Register a Client: Navigate to Clients and click Create . Provide a Client ID , and select the Client Protocol as openid-connect . Select the Client Access Type as confidential if your client is a web application that can secure the client secret. Otherwise, select public if your client is a native app or a JavaScript app running in the browser. Set Standard Flow Enabled to ON if you want to use the Authorization Code Flow which is recommended for most scenarios. Configure OpenID Connect Protocol: For each client, you can tailor what claims and assertions are stored in the OIDC token by creating and configuring protocol mappers. You may need to set up JSON mapping for certain claim keys in your application to handle roles or other claims passed by Keycloak. Client Adapters: Install a Keycloak Adapter in your application environment to communicate and be secured by Keycloak. Keycloak provides adapters for different platforms, and there are also third-party adapters available. Test Your Setup: At this point, it would be prudent to test your setup by attempting to authenticate using OpenID Connect. There are various grant types supported by Keycloak for authenticating users including authorization code, implicit, and client credentials. Additional Configuration (Optional): Depending on your application's requirements, you might need to configure additional settings in Keycloak or in your application. For instance, you might need to set up user roles, groups, and permissions, or configure multi-factor authentication. Documentations and Tutorials: There are various resources available that provide step-by-step guides or tutorials on integrating OpenID Connect with Keycloak, including the Keycloak official documentation . This extended step should provide a more thorough understanding of how to integrate OpenID Connect with Keycloak. However, the exact steps might vary based on your application's technology stack and your specific requirements. Step 3: Configure your System For a JavaScript application, you could use the Keycloak JavaScript adapter. npm install keycloak-js or a middleware as keycloak-connect npm install keycloak-connect Configure the library with the details of your Keycloak realm and client. // Example configuration for a JavaScript application const keycloak = Keycloak({ url: \"http://localhost:8080/auth\", realm: \"<your-realm>\", clientId: \"<your-client-id>\", }); Step 4: Integrate Authentication Use the library to add authentication to your system. For a web application, this would typically involve redirecting unauthenticated users to the Keycloak login page, and handling the tokens returned by Keycloak upon successful authentication. // Example integration for a JavaScript application keycloak .init({ onLoad: \"login-required\" }) .then((authenticated) => { console.log(authenticated ? \"Authenticated\" : \"Not authenticated\"); }) .catch((error) => { console.error(\"Failed to initialize authentication\", error); }); Step 5: Integrate Authorization Use the tokens obtained during authentication to make authorized requests to your system's backend, and to check the user's roles and permissions. // Example authorization check in a JavaScript application if (keycloak.hasRealmRole(\"admin\")) { console.log(\"User is an admin\"); } This tutorial provides a high-level overview of the steps involved in integrating Keycloak with your system. The exact steps and code may vary depending on the specifics of your system and the programming languages and frameworks you are using. Python Prerequisites Docker and Docker Compose installed. Python and pip installed. Basic understanding of Keycloak, Docker, Flask, and Python. Access the application over HTTPS and accept the self-signed certificate warning: \"The certificate is not trusted because it is self-signed.\" Project Structure Source: example example/ |-- docker-compose.yml |-- realm-export.json |-- client_secrets.json |-- requirements.txt |-- index.py |-- run.sh (for Linux/macOS) |-- run.bat (for Windows) Step 1: Setting Up Keycloak docker-compose.yml : This file contains the configuration to run a Keycloak container. Ensure it's set up as provided in your project. realm-export.json : Configure this file according to your Keycloak realm requirements. It contains realm, client, user, and role configurations. Step 2: Setting Up Python Flask Application requirements.txt : Lists the necessary Python packages, including Flask and Flask-OIDC. client_secrets.json : Contains Keycloak client configuration. Update the client_id , client_secret , and URLs according to your Keycloak setup. index.py : Contains your Flask application. Sets up routes for login, logout, and home page displaying user information. Step 3: Installing Dependencies Run the following command to install necessary Python packages: pip install -r requirements.txt Step 4: Running the Services Linux/macOS : Make run.sh executable: chmod +x run.sh . Execute run.sh to start the services: ./run.sh . Windows : Execute run.bat to start the services. Accessing the Application Navigate to https://localhost:3000/ (accept the self-signed certificate warning). Use the Keycloak authentication process to log in. Once logged in, user information will be displayed on the home page. To logout, navigate to https://localhost:3000/logout . Important Notes Ensure all URLs in client_secrets.json and realm-export.json match your Keycloak configuration. Remember to access the application via HTTPS and accept the browser warning about the self-signed certificate. Modify the index.py file to suit your application's specific Flask and OIDC needs. For more information you can visit the official documentation in https://www.keycloak.org/documentation","title":"Examples"},{"location":"tools/keycloak/examples/#examples","text":"","title":"Examples"},{"location":"tools/keycloak/examples/#nodejs","text":"","title":"Nodejs"},{"location":"tools/keycloak/examples/#prerequisites","text":"Docker and Docker Compose installed. Node.js and npm installed. Basic understanding of Keycloak, Docker, and Node.js.","title":"Prerequisites"},{"location":"tools/keycloak/examples/#project-structure","text":"Source: example example/ |-- docker-compose.yml |-- realm-export.json |-- keycloak.json |-- package.json |-- index.js |-- run.sh (for Linux/macOS) |-- run.bat (for Windows)","title":"Project Structure"},{"location":"tools/keycloak/examples/#step-1-setting-up-keycloak","text":"docker-compose.yml : This file contains the configuration to run a Keycloak container. Make sure the docker-compose.yml file is set up as provided in your project. realm-export.json : This file should be configured according to your Keycloak realm requirements. It contains realm, client, user, and role configurations.","title":"Step 1: Setting Up Keycloak"},{"location":"tools/keycloak/examples/#step-2-setting-up-nodejs-application","text":"package.json : This file contains your project metadata and dependencies. Ensure express , express-session , and keycloak-connect dependencies are listed. index.js : This file contains your Express application setup. It sets up routes for login, logout, and the home page which displays the JWT. keycloak.json : This file contains the Keycloak client configuration. Update the realm , resource , and credentials fields with your Keycloak configuration. Installing Dependencies : Run the following command to install the necessary packages as listed in your package.json : npm i","title":"Step 2: Setting Up Node.js Application"},{"location":"tools/keycloak/examples/#step-3-running-the-services","text":"Linux/macOS : Ensure run.sh is executable: chmod +x run.sh . Execute run.sh to start the services: ./run.sh . Windows : Double-click run.bat or run it in the command prompt to start the services.","title":"Step 3: Running the Services"},{"location":"tools/keycloak/examples/#accessing-the-application","text":"Navigate to localhost:3000/auth to log in using Keycloak. Once logged in, navigate to localhost:3000 to view the JWT and its decoded payload. To logout, navigate to localhost:3000/logout .","title":"Accessing the Application"},{"location":"tools/keycloak/examples/#step-1-install-and-setup-keycloak","text":"Download and install Keycloak from the official website . Start Keycloak by navigating to the bin directory of your Keycloak installation and executing the standalone.sh (for Linux/macOS) or standalone.bat (for Windows) script. Access the Keycloak Admin Console at http://localhost:8080/auth and complete the initial setup. Create an admin user for managing Keycloak.","title":"Step 1: Install and Setup Keycloak"},{"location":"tools/keycloak/examples/#step-2-create-a-realm-and-a-client-openid-connect","text":"Create a New Realm: Navigate to the Keycloak Admin Console. Click on \"Add realm\" to create a new realm. Enter the required details for your realm and save. Register a Client: Navigate to Clients and click Create . Provide a Client ID , and select the Client Protocol as openid-connect . Select the Client Access Type as confidential if your client is a web application that can secure the client secret. Otherwise, select public if your client is a native app or a JavaScript app running in the browser. Set Standard Flow Enabled to ON if you want to use the Authorization Code Flow which is recommended for most scenarios. Configure OpenID Connect Protocol: For each client, you can tailor what claims and assertions are stored in the OIDC token by creating and configuring protocol mappers. You may need to set up JSON mapping for certain claim keys in your application to handle roles or other claims passed by Keycloak. Client Adapters: Install a Keycloak Adapter in your application environment to communicate and be secured by Keycloak. Keycloak provides adapters for different platforms, and there are also third-party adapters available. Test Your Setup: At this point, it would be prudent to test your setup by attempting to authenticate using OpenID Connect. There are various grant types supported by Keycloak for authenticating users including authorization code, implicit, and client credentials. Additional Configuration (Optional): Depending on your application's requirements, you might need to configure additional settings in Keycloak or in your application. For instance, you might need to set up user roles, groups, and permissions, or configure multi-factor authentication. Documentations and Tutorials: There are various resources available that provide step-by-step guides or tutorials on integrating OpenID Connect with Keycloak, including the Keycloak official documentation . This extended step should provide a more thorough understanding of how to integrate OpenID Connect with Keycloak. However, the exact steps might vary based on your application's technology stack and your specific requirements.","title":"Step 2: Create a Realm and a Client (OpenID Connect)"},{"location":"tools/keycloak/examples/#step-3-configure-your-system","text":"For a JavaScript application, you could use the Keycloak JavaScript adapter. npm install keycloak-js or a middleware as keycloak-connect npm install keycloak-connect Configure the library with the details of your Keycloak realm and client. // Example configuration for a JavaScript application const keycloak = Keycloak({ url: \"http://localhost:8080/auth\", realm: \"<your-realm>\", clientId: \"<your-client-id>\", });","title":"Step 3: Configure your System"},{"location":"tools/keycloak/examples/#step-4-integrate-authentication","text":"Use the library to add authentication to your system. For a web application, this would typically involve redirecting unauthenticated users to the Keycloak login page, and handling the tokens returned by Keycloak upon successful authentication. // Example integration for a JavaScript application keycloak .init({ onLoad: \"login-required\" }) .then((authenticated) => { console.log(authenticated ? \"Authenticated\" : \"Not authenticated\"); }) .catch((error) => { console.error(\"Failed to initialize authentication\", error); });","title":"Step 4: Integrate Authentication"},{"location":"tools/keycloak/examples/#step-5-integrate-authorization","text":"Use the tokens obtained during authentication to make authorized requests to your system's backend, and to check the user's roles and permissions. // Example authorization check in a JavaScript application if (keycloak.hasRealmRole(\"admin\")) { console.log(\"User is an admin\"); } This tutorial provides a high-level overview of the steps involved in integrating Keycloak with your system. The exact steps and code may vary depending on the specifics of your system and the programming languages and frameworks you are using.","title":"Step 5: Integrate Authorization"},{"location":"tools/keycloak/examples/#python","text":"","title":"Python"},{"location":"tools/keycloak/examples/#prerequisites_1","text":"Docker and Docker Compose installed. Python and pip installed. Basic understanding of Keycloak, Docker, Flask, and Python. Access the application over HTTPS and accept the self-signed certificate warning: \"The certificate is not trusted because it is self-signed.\"","title":"Prerequisites"},{"location":"tools/keycloak/examples/#project-structure_1","text":"Source: example example/ |-- docker-compose.yml |-- realm-export.json |-- client_secrets.json |-- requirements.txt |-- index.py |-- run.sh (for Linux/macOS) |-- run.bat (for Windows)","title":"Project Structure"},{"location":"tools/keycloak/examples/#step-1-setting-up-keycloak_1","text":"docker-compose.yml : This file contains the configuration to run a Keycloak container. Ensure it's set up as provided in your project. realm-export.json : Configure this file according to your Keycloak realm requirements. It contains realm, client, user, and role configurations.","title":"Step 1: Setting Up Keycloak"},{"location":"tools/keycloak/examples/#step-2-setting-up-python-flask-application","text":"requirements.txt : Lists the necessary Python packages, including Flask and Flask-OIDC. client_secrets.json : Contains Keycloak client configuration. Update the client_id , client_secret , and URLs according to your Keycloak setup. index.py : Contains your Flask application. Sets up routes for login, logout, and home page displaying user information.","title":"Step 2: Setting Up Python Flask Application"},{"location":"tools/keycloak/examples/#step-3-installing-dependencies","text":"Run the following command to install necessary Python packages: pip install -r requirements.txt","title":"Step 3: Installing Dependencies"},{"location":"tools/keycloak/examples/#step-4-running-the-services","text":"Linux/macOS : Make run.sh executable: chmod +x run.sh . Execute run.sh to start the services: ./run.sh . Windows : Execute run.bat to start the services.","title":"Step 4: Running the Services"},{"location":"tools/keycloak/examples/#accessing-the-application_1","text":"Navigate to https://localhost:3000/ (accept the self-signed certificate warning). Use the Keycloak authentication process to log in. Once logged in, user information will be displayed on the home page. To logout, navigate to https://localhost:3000/logout .","title":"Accessing the Application"},{"location":"tools/keycloak/examples/#important-notes","text":"Ensure all URLs in client_secrets.json and realm-export.json match your Keycloak configuration. Remember to access the application via HTTPS and accept the browser warning about the self-signed certificate. Modify the index.py file to suit your application's specific Flask and OIDC needs. For more information you can visit the official documentation in https://www.keycloak.org/documentation","title":"Important Notes"}]}