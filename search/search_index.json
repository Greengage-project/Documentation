{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Technical Guide for GREENGAGE Project Integration Project The GREENGAGE project is a three-year-long pan-European initiative aimed at strengthening urban governance through citizen-based co-creation and crowd-sourcing. Funded under the Horizon Europe Framework Programme and co-funded by the UK government and Switzerland's State Secretariat for Education, Research and Innovation, this project is led by the Austrian Institute of Technology and comprises 17 research and industry partners from the EU and the UK. The project seeks to encourage innovative governance processes and assist public authorities in formulating climate mitigation and adaptation policies. By leveraging citizen participation and providing innovative digital solutions, GREENGAGE lays the groundwork for co-creating and co-designing innovative solutions to monitor environmental issues at the grassroots level. The developed Citizen Observatories (CO) are intended to be further integrated into urban planning decision-making processes. The project encompasses campaigns in four pilot cities across Europe, focusing on mobility, air quality, and healthy living, with citizens encouraged to observe and co-create data solutions for urban environments through Citizen Observatories. Tools The tools directory contains subdirectories for each tool utilized in the project. Each subdirectory includes a detailed description of the tool, its functionality, and its role within the project. Keycloak Directory : /tools Link : tools/keycloak Description : Keycloak is an open-source Identity and Access Management solution aimed at modern applications and services. It facilitates the secure transmission of identity information between applications and services, even across different domains. Examples of integration : asdas The above README provides a structured outline to document the technical aspects of the GREENGAGE project, offering a solid starting point to further elaborate on the tools and processes involved in the project.","title":"Home"},{"location":"#technical-guide-for-greengage-project-integration","text":"","title":"Technical Guide for GREENGAGE Project Integration"},{"location":"#project","text":"The GREENGAGE project is a three-year-long pan-European initiative aimed at strengthening urban governance through citizen-based co-creation and crowd-sourcing. Funded under the Horizon Europe Framework Programme and co-funded by the UK government and Switzerland's State Secretariat for Education, Research and Innovation, this project is led by the Austrian Institute of Technology and comprises 17 research and industry partners from the EU and the UK. The project seeks to encourage innovative governance processes and assist public authorities in formulating climate mitigation and adaptation policies. By leveraging citizen participation and providing innovative digital solutions, GREENGAGE lays the groundwork for co-creating and co-designing innovative solutions to monitor environmental issues at the grassroots level. The developed Citizen Observatories (CO) are intended to be further integrated into urban planning decision-making processes. The project encompasses campaigns in four pilot cities across Europe, focusing on mobility, air quality, and healthy living, with citizens encouraged to observe and co-create data solutions for urban environments through Citizen Observatories.","title":"Project"},{"location":"#tools","text":"The tools directory contains subdirectories for each tool utilized in the project. Each subdirectory includes a detailed description of the tool, its functionality, and its role within the project.","title":"Tools"},{"location":"#keycloak","text":"Directory : /tools Link : tools/keycloak Description : Keycloak is an open-source Identity and Access Management solution aimed at modern applications and services. It facilitates the secure transmission of identity information between applications and services, even across different domains. Examples of integration : asdas The above README provides a structured outline to document the technical aspects of the GREENGAGE project, offering a solid starting point to further elaborate on the tools and processes involved in the project.","title":"Keycloak"},{"location":"guidelines/","text":"Writing Guidelines for Documenting a Tool Integration Process The following guidelines are designed to help you document the process of integrating a new tool into your existing system. Whether it's a tool for monitoring, analytics, deployment, or any other purpose, these guidelines will help you create a clear and comprehensive integration guide. Overview Start with a brief overview of what the tool does and why it's beneficial to integrate it into your system. This section should answer the \"what\" and \"why\" of the tool. Example: This guide will provide an overview of integrating [Tool Name], a powerful [functionality of the tool], into our current system. [Tool Name] enhances our system by providing [key benefits], ensuring [specific improvements]. Prerequisites List any prerequisites that are necessary before beginning the integration process, such as account creation, software dependencies, or access rights. Example: Before integrating [Tool Name], ensure you have: 1. An active [Tool Name] account. 2. Required permissions for system changes. 3. Installed [necessary software/dependencies]. Integration Advantages Highlight the advantages of integrating this tool. Be specific about how it will improve your system's functionality, reliability, security, or user experience. Example: Integrating [Tool Name] with our system offers multiple advantages: 1. Enhanced [feature/performance]. 2. Improved [specific system aspect]. 3. Streamlined [process/workflow]. Step-by-Step Integration Process 1. Installation or Setup Provide detailed steps on how to install or set up the tool. Example: a. Navigate to [installation page]. b. Select the appropriate [version/system]. c. Follow the on-screen instructions to install. 2. Configuration Detail how to configure the tool for initial use, including setting preferences, connecting to your system, or modifying settings. Example: a. Open the configuration file located at [path]. b. Set [parameter] to [value]. c. Save changes and exit. 3. Authentication and Authorization (if applicable) If the tool requires authentication, give instructions on how to set up user accounts or API keys. Example: a. Generate an API key by going to [settings page]. b. Store the API key in a secure location. 4. Integration with the System Describe the process of connecting the tool to your system, such as modifying code, updating environment variables, or using plugins. Example: a. In your system's environment file, add the following variable: [variable]. b. If using a plugin, install it via [plugin installation method]. 5. Testing the Integration Explain how to verify that the tool has been successfully integrated. Example: a. Perform a test by [method]. b. Check for [expected outcome]. 6. Troubleshooting Provide some common issues that might occur during integration and their solutions. Example: If you encounter [issue], try the following solutions: 1. Check if [condition] is met. 2. Ensure [configuration] is set correctly. 7. Maintenance and Updates Give recommendations on maintaining the integration, handling updates, and where to find changelogs or update instructions. Example: Regularly check [Tool Name]'s official website for updates. Follow the update guide [link to update guide] to ensure seamless tool functionality. Additional Resources List additional resources, such as official documentation, community forums, or support channels. Example: For more information or support, you can refer to: 1. Official Documentation . 2. Community Forums . 3. Support Channels . Example Integration: [Tool Name] with [System Name] Overview Provide a brief description of how the tool will be used with a specific example system. Prerequisites List the prerequisites specific to the example. Step-by-Step Guide Detail the process of integrating the tool with the example system, tailored to the system's characteristics. Accessing the Application Instructions on how to access or use the tool once integrated into the example system. Troubleshooting Specific to the Example Address any issues that are unique to the integration with the example system. By following these guidelines, you will create a useful document that will enable others to understand the purpose of the tool and integrate it effectively into their systems. Remember to keep your documentation updated as both the tool and your system evolve.","title":"Writing Guidelines for Documenting a Tool Integration Process"},{"location":"guidelines/#writing-guidelines-for-documenting-a-tool-integration-process","text":"The following guidelines are designed to help you document the process of integrating a new tool into your existing system. Whether it's a tool for monitoring, analytics, deployment, or any other purpose, these guidelines will help you create a clear and comprehensive integration guide.","title":"Writing Guidelines for Documenting a Tool Integration Process"},{"location":"guidelines/#overview","text":"Start with a brief overview of what the tool does and why it's beneficial to integrate it into your system. This section should answer the \"what\" and \"why\" of the tool.","title":"Overview"},{"location":"guidelines/#example","text":"This guide will provide an overview of integrating [Tool Name], a powerful [functionality of the tool], into our current system. [Tool Name] enhances our system by providing [key benefits], ensuring [specific improvements].","title":"Example:"},{"location":"guidelines/#prerequisites","text":"List any prerequisites that are necessary before beginning the integration process, such as account creation, software dependencies, or access rights.","title":"Prerequisites"},{"location":"guidelines/#example_1","text":"Before integrating [Tool Name], ensure you have: 1. An active [Tool Name] account. 2. Required permissions for system changes. 3. Installed [necessary software/dependencies].","title":"Example:"},{"location":"guidelines/#integration-advantages","text":"Highlight the advantages of integrating this tool. Be specific about how it will improve your system's functionality, reliability, security, or user experience.","title":"Integration Advantages"},{"location":"guidelines/#example_2","text":"Integrating [Tool Name] with our system offers multiple advantages: 1. Enhanced [feature/performance]. 2. Improved [specific system aspect]. 3. Streamlined [process/workflow].","title":"Example:"},{"location":"guidelines/#step-by-step-integration-process","text":"","title":"Step-by-Step Integration Process"},{"location":"guidelines/#1-installation-or-setup","text":"Provide detailed steps on how to install or set up the tool.","title":"1. Installation or Setup"},{"location":"guidelines/#example_3","text":"a. Navigate to [installation page]. b. Select the appropriate [version/system]. c. Follow the on-screen instructions to install.","title":"Example:"},{"location":"guidelines/#2-configuration","text":"Detail how to configure the tool for initial use, including setting preferences, connecting to your system, or modifying settings.","title":"2. Configuration"},{"location":"guidelines/#example_4","text":"a. Open the configuration file located at [path]. b. Set [parameter] to [value]. c. Save changes and exit.","title":"Example:"},{"location":"guidelines/#3-authentication-and-authorization-if-applicable","text":"If the tool requires authentication, give instructions on how to set up user accounts or API keys.","title":"3. Authentication and Authorization (if applicable)"},{"location":"guidelines/#example_5","text":"a. Generate an API key by going to [settings page]. b. Store the API key in a secure location.","title":"Example:"},{"location":"guidelines/#4-integration-with-the-system","text":"Describe the process of connecting the tool to your system, such as modifying code, updating environment variables, or using plugins.","title":"4. Integration with the System"},{"location":"guidelines/#example_6","text":"a. In your system's environment file, add the following variable: [variable]. b. If using a plugin, install it via [plugin installation method].","title":"Example:"},{"location":"guidelines/#5-testing-the-integration","text":"Explain how to verify that the tool has been successfully integrated.","title":"5. Testing the Integration"},{"location":"guidelines/#example_7","text":"a. Perform a test by [method]. b. Check for [expected outcome].","title":"Example:"},{"location":"guidelines/#6-troubleshooting","text":"Provide some common issues that might occur during integration and their solutions.","title":"6. Troubleshooting"},{"location":"guidelines/#example_8","text":"If you encounter [issue], try the following solutions: 1. Check if [condition] is met. 2. Ensure [configuration] is set correctly.","title":"Example:"},{"location":"guidelines/#7-maintenance-and-updates","text":"Give recommendations on maintaining the integration, handling updates, and where to find changelogs or update instructions.","title":"7. Maintenance and Updates"},{"location":"guidelines/#example_9","text":"Regularly check [Tool Name]'s official website for updates. Follow the update guide [link to update guide] to ensure seamless tool functionality.","title":"Example:"},{"location":"guidelines/#additional-resources","text":"List additional resources, such as official documentation, community forums, or support channels.","title":"Additional Resources"},{"location":"guidelines/#example_10","text":"For more information or support, you can refer to: 1. Official Documentation . 2. Community Forums . 3. Support Channels .","title":"Example:"},{"location":"guidelines/#example-integration-tool-name-with-system-name","text":"","title":"Example Integration: [Tool Name] with [System Name]"},{"location":"guidelines/#overview_1","text":"Provide a brief description of how the tool will be used with a specific example system.","title":"Overview"},{"location":"guidelines/#prerequisites_1","text":"List the prerequisites specific to the example.","title":"Prerequisites"},{"location":"guidelines/#step-by-step-guide","text":"Detail the process of integrating the tool with the example system, tailored to the system's characteristics.","title":"Step-by-Step Guide"},{"location":"guidelines/#accessing-the-application","text":"Instructions on how to access or use the tool once integrated into the example system.","title":"Accessing the Application"},{"location":"guidelines/#troubleshooting-specific-to-the-example","text":"Address any issues that are unique to the integration with the example system. By following these guidelines, you will create a useful document that will enable others to understand the purpose of the tool and integrate it effectively into their systems. Remember to keep your documentation updated as both the tool and your system evolve.","title":"Troubleshooting Specific to the Example"},{"location":"tools/TOOLNAME_template/","text":"","title":"Index"},{"location":"tools/TOOLNAME_template/integration/","text":"","title":"Integration"},{"location":"tools/TOOLNAME_template/example/","text":"","title":"Index"},{"location":"tools/keycloak/","text":"Keycloak Setting Up a Development Environment: Guide to Integrating Keycloak Introduction: In today's rapidly evolving tech landscape, ensuring the security of your applications is paramount. As you venture into developing or enhancing your application, integrating a robust authentication and authorization mechanism is crucial. This tutorial aims to guide you through setting up a development environment by integrating Keycloak, an open-source Identity and Access Management solution. Whether you're working on a brand new project or improving an existing one, following this guide will provide a solid foundation for securing your application using Keycloak. Advantages of Utilizing Keycloak: Single Sign-On (SSO) & Sign-Out: Keycloak facilitates SSO and Single Sign-Out, allowing users to log in once and access various applications without needing to log in again. Standards-Based: Keycloak supports standard protocols for authentication and authorization such as OpenID Connect, OAuth 2.0, and SAML 2.0, ensuring compatibility with various systems. User Federation: It allows user federation with a variety of sources including LDAP and Active Directory, enabling you to manage users and their roles centrally. Customizable: Keycloak is highly customizable, offering a broad range of options to tailor authentication and authorization flows to meet your specific requirements. Scalable: It is designed to be scalable, catering to both small applications and large enterprise solutions with millions of users. Role-Based Access Control (RBAC): Keycloak provides fine-grained authorization and role management, enabling you to control who has access to what in your applications. Multi-factor Authentication (MFA): It supports multi-factor authentication, enhancing security by requiring users to provide multiple forms of identification before gaining access. Social Login: Keycloak supports social logins, allowing users to log in using their social media accounts which can enhance user experience and increase adoption rates. Easy to Integrate: With a variety of client adapters and libraries, integrating Keycloak with your application is straightforward regardless of the technology stack you're using. Support and Community: Being an open-source project, Keycloak has a vibrant community and a wealth of resources available to help you throughout your integration journey. Use case The following diagram show the sequences for an user auythentication procress using Keycloak as an OpenID Connect (OIDC) provider The User initiates the process by requesting a page from the Application. The Application then redirects the User to a browser for authentication. The browser initiates an Authentication Request to Keycloak. Keycloak presents a Login Page to the User. The User enters their credentials into the login page. The credentials are submitted back to Keycloak for validation. Upon successful validation, Keycloak redirects the User back to the Application. The Application makes a Token Request to Keycloak. Keycloak validates the request and, if valid, returns a Token to the Application. With the Token, the User is granted access to the requested page within the Application.","title":"Keycloak"},{"location":"tools/keycloak/#keycloak","text":"","title":"Keycloak"},{"location":"tools/keycloak/#setting-up-a-development-environment-guide-to-integrating-keycloak","text":"","title":"Setting Up a Development Environment: Guide to Integrating Keycloak"},{"location":"tools/keycloak/#introduction","text":"In today's rapidly evolving tech landscape, ensuring the security of your applications is paramount. As you venture into developing or enhancing your application, integrating a robust authentication and authorization mechanism is crucial. This tutorial aims to guide you through setting up a development environment by integrating Keycloak, an open-source Identity and Access Management solution. Whether you're working on a brand new project or improving an existing one, following this guide will provide a solid foundation for securing your application using Keycloak.","title":"Introduction:"},{"location":"tools/keycloak/#advantages-of-utilizing-keycloak","text":"Single Sign-On (SSO) & Sign-Out: Keycloak facilitates SSO and Single Sign-Out, allowing users to log in once and access various applications without needing to log in again. Standards-Based: Keycloak supports standard protocols for authentication and authorization such as OpenID Connect, OAuth 2.0, and SAML 2.0, ensuring compatibility with various systems. User Federation: It allows user federation with a variety of sources including LDAP and Active Directory, enabling you to manage users and their roles centrally. Customizable: Keycloak is highly customizable, offering a broad range of options to tailor authentication and authorization flows to meet your specific requirements. Scalable: It is designed to be scalable, catering to both small applications and large enterprise solutions with millions of users. Role-Based Access Control (RBAC): Keycloak provides fine-grained authorization and role management, enabling you to control who has access to what in your applications. Multi-factor Authentication (MFA): It supports multi-factor authentication, enhancing security by requiring users to provide multiple forms of identification before gaining access. Social Login: Keycloak supports social logins, allowing users to log in using their social media accounts which can enhance user experience and increase adoption rates. Easy to Integrate: With a variety of client adapters and libraries, integrating Keycloak with your application is straightforward regardless of the technology stack you're using. Support and Community: Being an open-source project, Keycloak has a vibrant community and a wealth of resources available to help you throughout your integration journey.","title":"Advantages of Utilizing Keycloak:"},{"location":"tools/keycloak/#use-case","text":"The following diagram show the sequences for an user auythentication procress using Keycloak as an OpenID Connect (OIDC) provider The User initiates the process by requesting a page from the Application. The Application then redirects the User to a browser for authentication. The browser initiates an Authentication Request to Keycloak. Keycloak presents a Login Page to the User. The User enters their credentials into the login page. The credentials are submitted back to Keycloak for validation. Upon successful validation, Keycloak redirects the User back to the Application. The Application makes a Token Request to Keycloak. Keycloak validates the request and, if valid, returns a Token to the Application. With the Token, the User is granted access to the requested page within the Application.","title":"Use case"},{"location":"tools/keycloak/integration/","text":"Keycloak Integration Guide for Third-Party Services To facilitate a centralized user management system, we are utilizing Keycloak as our identity and access management solution. To integrate your service with our Keycloak system, please follow the instructions below to request the necessary credentials. Step 1: Requesting Client Credentials Send an email to greengage.admin@deusto.es with the subject line: \"[GREENGAGE] Request for Keycloak Client Credentials\". In the body of the email, please provide the following information: Tool name: Description: (no more than 200 characters): Contact name:(for technical propose) Contact email:(for technical propose) Step 2: Receiving Your Credentials Upon receipt of your request, we will review the information and create a unique Client ID and Secret for your service. We will then send you an email with your Client ID and Secret, which you will use to configure the integration on your side. Step 3: Configuring Your Service Once you have received your Client ID and Secret, incorporate these credentials into your service\u2019s authentication module. Ensure that your service is set to communicate with our Keycloak server using the OpenID Connect protocol. Step 4: Testing the Integration After configuring your service, conduct thorough testing to ensure that the authentication process works correctly. If you encounter any issues during testing, please reach out to us via email for support. If you have any questions about Keycloak integration, please contact us at greengage.admin@deusto.es with the subject \"[Greengage] Keycloak support request\" Important Notes: Keep your Client Secret confidential. Do not share it with unauthorized personnel or services. If you believe your Client Secret has been compromised, contact us immediately to issue a new one. Adhere to all security best practices when implementing the integration to safeguard user data.","title":"Keycloak Integration Guide for Third-Party Services"},{"location":"tools/keycloak/integration/#keycloak-integration-guide-for-third-party-services","text":"To facilitate a centralized user management system, we are utilizing Keycloak as our identity and access management solution. To integrate your service with our Keycloak system, please follow the instructions below to request the necessary credentials. Step 1: Requesting Client Credentials Send an email to greengage.admin@deusto.es with the subject line: \"[GREENGAGE] Request for Keycloak Client Credentials\". In the body of the email, please provide the following information: Tool name: Description: (no more than 200 characters): Contact name:(for technical propose) Contact email:(for technical propose) Step 2: Receiving Your Credentials Upon receipt of your request, we will review the information and create a unique Client ID and Secret for your service. We will then send you an email with your Client ID and Secret, which you will use to configure the integration on your side. Step 3: Configuring Your Service Once you have received your Client ID and Secret, incorporate these credentials into your service\u2019s authentication module. Ensure that your service is set to communicate with our Keycloak server using the OpenID Connect protocol. Step 4: Testing the Integration After configuring your service, conduct thorough testing to ensure that the authentication process works correctly. If you encounter any issues during testing, please reach out to us via email for support. If you have any questions about Keycloak integration, please contact us at greengage.admin@deusto.es with the subject \"[Greengage] Keycloak support request\" Important Notes: Keep your Client Secret confidential. Do not share it with unauthorized personnel or services. If you believe your Client Secret has been compromised, contact us immediately to issue a new one. Adhere to all security best practices when implementing the integration to safeguard user data.","title":"Keycloak Integration Guide for Third-Party Services"},{"location":"tools/keycloak/example/","text":"Examples Nodejs Prerequisites Docker and Docker Compose installed. Node.js and npm installed. Basic understanding of Keycloak, Docker, and Node.js. Project Structure Source: example example/ |-- docker-compose.yml |-- realm-export.json |-- keycloak.json |-- package.json |-- index.js |-- run.sh (for Linux/macOS) |-- run.bat (for Windows) Step 1: Setting Up Keycloak docker-compose.yml : This file contains the configuration to run a Keycloak container. Make sure the docker-compose.yml file is set up as provided in your project. realm-export.json : This file should be configured according to your Keycloak realm requirements. It contains realm, client, user, and role configurations. Step 2: Setting Up Node.js Application package.json : This file contains your project metadata and dependencies. Ensure express , express-session , and keycloak-connect dependencies are listed. index.js : This file contains your Express application setup. It sets up routes for login, logout, and the home page which displays the JWT. keycloak.json : This file contains the Keycloak client configuration. Update the realm , resource , and credentials fields with your Keycloak configuration. Installing Dependencies : Run the following command to install the necessary packages as listed in your package.json : npm i Step 3: Running the Services Linux/macOS : Ensure run.sh is executable: chmod +x run.sh . Execute run.sh to start the services: ./run.sh . Windows : Double-click run.bat or run it in the command prompt to start the services. Accessing the Application Navigate to localhost:3000/auth to log in using Keycloak. Once logged in, navigate to localhost:3000 to view the JWT and its decoded payload. To logout, navigate to localhost:3000/logout . Step 1: Install and Setup Keycloak Download and install Keycloak from the official website . Start Keycloak by navigating to the bin directory of your Keycloak installation and executing the standalone.sh (for Linux/macOS) or standalone.bat (for Windows) script. Access the Keycloak Admin Console at http://localhost:8080/auth and complete the initial setup. Create an admin user for managing Keycloak. Step 2: Create a Realm and a Client (OpenID Connect) Create a New Realm: Navigate to the Keycloak Admin Console. Click on \"Add realm\" to create a new realm. Enter the required details for your realm and save. Register a Client: Navigate to Clients and click Create . Provide a Client ID , and select the Client Protocol as openid-connect . Select the Client Access Type as confidential if your client is a web application that can secure the client secret. Otherwise, select public if your client is a native app or a JavaScript app running in the browser. Set Standard Flow Enabled to ON if you want to use the Authorization Code Flow which is recommended for most scenarios. Configure OpenID Connect Protocol: For each client, you can tailor what claims and assertions are stored in the OIDC token by creating and configuring protocol mappers. You may need to set up JSON mapping for certain claim keys in your application to handle roles or other claims passed by Keycloak. Client Adapters: Install a Keycloak Adapter in your application environment to communicate and be secured by Keycloak. Keycloak provides adapters for different platforms, and there are also third-party adapters available. Test Your Setup: At this point, it would be prudent to test your setup by attempting to authenticate using OpenID Connect. There are various grant types supported by Keycloak for authenticating users including authorization code, implicit, and client credentials. Additional Configuration (Optional): Depending on your application's requirements, you might need to configure additional settings in Keycloak or in your application. For instance, you might need to set up user roles, groups, and permissions, or configure multi-factor authentication. Documentations and Tutorials: There are various resources available that provide step-by-step guides or tutorials on integrating OpenID Connect with Keycloak, including the Keycloak official documentation . This extended step should provide a more thorough understanding of how to integrate OpenID Connect with Keycloak. However, the exact steps might vary based on your application's technology stack and your specific requirements. Step 3: Configure your System For a JavaScript application, you could use the Keycloak JavaScript adapter. npm install keycloak-js or a middleware as keycloak-connect npm install keycloak-connect Configure the library with the details of your Keycloak realm and client. // Example configuration for a JavaScript application const keycloak = Keycloak({ url: \"http://localhost:8080/auth\", realm: \"<your-realm>\", clientId: \"<your-client-id>\", }); Step 4: Integrate Authentication Use the library to add authentication to your system. For a web application, this would typically involve redirecting unauthenticated users to the Keycloak login page, and handling the tokens returned by Keycloak upon successful authentication. // Example integration for a JavaScript application keycloak .init({ onLoad: \"login-required\" }) .then((authenticated) => { console.log(authenticated ? \"Authenticated\" : \"Not authenticated\"); }) .catch((error) => { console.error(\"Failed to initialize authentication\", error); }); Step 5: Integrate Authorization Use the tokens obtained during authentication to make authorized requests to your system's backend, and to check the user's roles and permissions. // Example authorization check in a JavaScript application if (keycloak.hasRealmRole(\"admin\")) { console.log(\"User is an admin\"); } This tutorial provides a high-level overview of the steps involved in integrating Keycloak with your system. The exact steps and code may vary depending on the specifics of your system and the programming languages and frameworks you are using. For more information you can visit the official documentation in https://www.keycloak.org/documentation","title":"Examples"},{"location":"tools/keycloak/example/#examples","text":"","title":"Examples"},{"location":"tools/keycloak/example/#nodejs","text":"","title":"Nodejs"},{"location":"tools/keycloak/example/#prerequisites","text":"Docker and Docker Compose installed. Node.js and npm installed. Basic understanding of Keycloak, Docker, and Node.js.","title":"Prerequisites"},{"location":"tools/keycloak/example/#project-structure","text":"Source: example example/ |-- docker-compose.yml |-- realm-export.json |-- keycloak.json |-- package.json |-- index.js |-- run.sh (for Linux/macOS) |-- run.bat (for Windows)","title":"Project Structure"},{"location":"tools/keycloak/example/#step-1-setting-up-keycloak","text":"docker-compose.yml : This file contains the configuration to run a Keycloak container. Make sure the docker-compose.yml file is set up as provided in your project. realm-export.json : This file should be configured according to your Keycloak realm requirements. It contains realm, client, user, and role configurations.","title":"Step 1: Setting Up Keycloak"},{"location":"tools/keycloak/example/#step-2-setting-up-nodejs-application","text":"package.json : This file contains your project metadata and dependencies. Ensure express , express-session , and keycloak-connect dependencies are listed. index.js : This file contains your Express application setup. It sets up routes for login, logout, and the home page which displays the JWT. keycloak.json : This file contains the Keycloak client configuration. Update the realm , resource , and credentials fields with your Keycloak configuration. Installing Dependencies : Run the following command to install the necessary packages as listed in your package.json : npm i","title":"Step 2: Setting Up Node.js Application"},{"location":"tools/keycloak/example/#step-3-running-the-services","text":"Linux/macOS : Ensure run.sh is executable: chmod +x run.sh . Execute run.sh to start the services: ./run.sh . Windows : Double-click run.bat or run it in the command prompt to start the services.","title":"Step 3: Running the Services"},{"location":"tools/keycloak/example/#accessing-the-application","text":"Navigate to localhost:3000/auth to log in using Keycloak. Once logged in, navigate to localhost:3000 to view the JWT and its decoded payload. To logout, navigate to localhost:3000/logout .","title":"Accessing the Application"},{"location":"tools/keycloak/example/#step-1-install-and-setup-keycloak","text":"Download and install Keycloak from the official website . Start Keycloak by navigating to the bin directory of your Keycloak installation and executing the standalone.sh (for Linux/macOS) or standalone.bat (for Windows) script. Access the Keycloak Admin Console at http://localhost:8080/auth and complete the initial setup. Create an admin user for managing Keycloak.","title":"Step 1: Install and Setup Keycloak"},{"location":"tools/keycloak/example/#step-2-create-a-realm-and-a-client-openid-connect","text":"Create a New Realm: Navigate to the Keycloak Admin Console. Click on \"Add realm\" to create a new realm. Enter the required details for your realm and save. Register a Client: Navigate to Clients and click Create . Provide a Client ID , and select the Client Protocol as openid-connect . Select the Client Access Type as confidential if your client is a web application that can secure the client secret. Otherwise, select public if your client is a native app or a JavaScript app running in the browser. Set Standard Flow Enabled to ON if you want to use the Authorization Code Flow which is recommended for most scenarios. Configure OpenID Connect Protocol: For each client, you can tailor what claims and assertions are stored in the OIDC token by creating and configuring protocol mappers. You may need to set up JSON mapping for certain claim keys in your application to handle roles or other claims passed by Keycloak. Client Adapters: Install a Keycloak Adapter in your application environment to communicate and be secured by Keycloak. Keycloak provides adapters for different platforms, and there are also third-party adapters available. Test Your Setup: At this point, it would be prudent to test your setup by attempting to authenticate using OpenID Connect. There are various grant types supported by Keycloak for authenticating users including authorization code, implicit, and client credentials. Additional Configuration (Optional): Depending on your application's requirements, you might need to configure additional settings in Keycloak or in your application. For instance, you might need to set up user roles, groups, and permissions, or configure multi-factor authentication. Documentations and Tutorials: There are various resources available that provide step-by-step guides or tutorials on integrating OpenID Connect with Keycloak, including the Keycloak official documentation . This extended step should provide a more thorough understanding of how to integrate OpenID Connect with Keycloak. However, the exact steps might vary based on your application's technology stack and your specific requirements.","title":"Step 2: Create a Realm and a Client (OpenID Connect)"},{"location":"tools/keycloak/example/#step-3-configure-your-system","text":"For a JavaScript application, you could use the Keycloak JavaScript adapter. npm install keycloak-js or a middleware as keycloak-connect npm install keycloak-connect Configure the library with the details of your Keycloak realm and client. // Example configuration for a JavaScript application const keycloak = Keycloak({ url: \"http://localhost:8080/auth\", realm: \"<your-realm>\", clientId: \"<your-client-id>\", });","title":"Step 3: Configure your System"},{"location":"tools/keycloak/example/#step-4-integrate-authentication","text":"Use the library to add authentication to your system. For a web application, this would typically involve redirecting unauthenticated users to the Keycloak login page, and handling the tokens returned by Keycloak upon successful authentication. // Example integration for a JavaScript application keycloak .init({ onLoad: \"login-required\" }) .then((authenticated) => { console.log(authenticated ? \"Authenticated\" : \"Not authenticated\"); }) .catch((error) => { console.error(\"Failed to initialize authentication\", error); });","title":"Step 4: Integrate Authentication"},{"location":"tools/keycloak/example/#step-5-integrate-authorization","text":"Use the tokens obtained during authentication to make authorized requests to your system's backend, and to check the user's roles and permissions. // Example authorization check in a JavaScript application if (keycloak.hasRealmRole(\"admin\")) { console.log(\"User is an admin\"); } This tutorial provides a high-level overview of the steps involved in integrating Keycloak with your system. The exact steps and code may vary depending on the specifics of your system and the programming languages and frameworks you are using. For more information you can visit the official documentation in https://www.keycloak.org/documentation","title":"Step 5: Integrate Authorization"}]}